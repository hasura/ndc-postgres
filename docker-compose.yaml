version: "3.6"

services:
  postgres:
    image: postgis/postgis:${POSTGRESQL_VERSION:-16}-3.4
    platform: linux/amd64
    command:
      - -F # turn fsync off for speed
      - -N 1000 # increase max connections from 100 so we can run more HGEs
    ports:
      - 64002:5432
    environment:
      POSTGRES_PASSWORD: "password"
    volumes:
      - type: tmpfs
        target: /var/lib/postgresql/data
      - type: bind
        source: ./static/chinook-postgres.sql
        target: /docker-entrypoint-initdb.d/00-chinook-postgres.sql
        read_only: true
      - type: bind
        source: ./static/composite-types.sql
        target: /docker-entrypoint-initdb.d/01-composite-types.sql
        read_only: true
      - type: bind
        source: ./static/custom-tables.sql
        target: /docker-entrypoint-initdb.d/02-custom-tables.sql
        read_only: true
      - type: bind
        source: ./static/copy-chinook.sql
        target: /docker-entrypoint-initdb.d/03-copy-chinook.sql
        read_only: true
    healthcheck:
      test:
        - CMD-SHELL
        - psql -U "$${POSTGRES_USER:-postgres}" < /dev/null && sleep 5 && psql -U "$${POSTGRES_USER:-postgres}" < /dev/null
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 20

  cockroach:
    image: cockroachdb/cockroach:latest-v23.1
    command:
      - start-single-node
      - --insecure
      - --accept-sql-without-tls
    init: true # doesn't shut down properly without this
    ports:
      - 64003:26257
    environment:
      COCKROACH_USER: "postgres"
    volumes:
      - type: tmpfs
        target: /cockroach/cockroach-data
      - type: bind
        source: ./static/chinook-postgres.sql
        target: /docker-entrypoint-initdb.d/chinook-postgres.sql
        read_only: true
    healthcheck:
      test:
        - CMD-SHELL
        - cockroach sql --insecure --execute "select 1;"
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 20

  citus:
    image: citusdata/citus:12.1.1
    platform: linux/amd64
    command:
      - -F # turn fsync off for speed
      - -N 1000 # increase max connections from 100 so we can run more HGEs
      - "-cclient_min_messages=error"
    ports:
      - 64004:5432
    environment:
      POSTGRES_PASSWORD: "password" # you probably want to override this
    volumes:
      - type: tmpfs
        target: /var/lib/postgresql/data
      - type: bind
        source: ./static/chinook-postgres.sql
        target: /docker-entrypoint-initdb.d/chinook-postgres.sql
        read_only: true
      - type: bind
        source: ./static/composite-types.sql
        target: /docker-entrypoint-initdb.d/composite-types.sql
        read_only: true
    healthcheck:
      test:
        - CMD-SHELL
        - psql -U "$${POSTGRES_USER:-postgres}" < /dev/null && sleep 5 && psql -U "$${POSTGRES_USER:-postgres}" < /dev/null
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 20

  yugabyte:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    platform: linux/amd64
    # we use a custom script to start Yugabyte and then load Chinook data
    command:
      - ./start.sh
    ports:
      - 64005:5433
    volumes:
      - type: tmpfs
        target: /root/var
      - type: bind
        source: ./static/chinook-postgres.sql
        target: /home/yugabyte/chinook-postgres.sql
        read_only: true
      - type: bind
        source: ./static/composite-types.sql
        target: /home/yugabyte/composite-types.sql
        read_only: true
      - type: bind
        source: ./static/yugabyte/start.sh
        target: /home/yugabyte/start.sh
        read_only: true
    healthcheck:
      test:
        - CMD-SHELL
        - |
          set -e
          ./bin/ysqlsh < /dev/null  # ensure we can connect
          [[ -f /root/var/test-data.loaded ]]  # check that the Chinook data has finished loading
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 20

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./metrics/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - type: volume
        source: prom_data
        target: /prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3001:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - type: bind
        source: ./metrics/grafana
        target: /etc/grafana/provisioning/datasources
        read_only: true
      - type: bind
        source: ./metrics/grafana/dashboard.yaml
        target: /etc/grafana/provisioning/dashboards/main.yaml
      - type: bind
        source: ./metrics/grafana/dashboards
        target: /var/lib/grafana/dashboards
      - type: volume
        source: grafana_data
        target: /var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.37
    restart: always
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 4002:16686
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 4317:4317 # OTLP gRPC
      - 4318:4318 # OTLP HTTP
      - 9411:9411
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_ZIPKIN_HOST_PORT: "9411"

  auth-hook:
    build: ${HGE_V3_DIRECTORY:-../v3-engine}/hasura-authn-webhook/dev-auth-webhook
    init: true
    ports:
      - 3050:3050

volumes:
  prom_data:
  grafana_data:
