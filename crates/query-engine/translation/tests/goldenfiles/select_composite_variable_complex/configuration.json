{
  "version": "3",
  "metadata": {
    "nativeQueries": {
      "make_person": {
        "sql": "SELECT ROW({{name}}, {{address}})::person as result",
        "columns": {
          "result": {
            "name": "result",
            "type": {
              "compositeType": "person"
            },
            "nullable": "nullable",
            "description": null
          }
        },
        "arguments": {
          "name": {
            "name": "name",
            "type": {
              "compositeType": "person_name"
            },
            "nullable": "nullable"
          },
          "address": {
            "name": "address",
            "type": {
              "compositeType": "person_address"
            },
            "nullable": "nullable"
          }
        },
        "description": "A native query used to test support for composite types"
      }
    },
    "compositeTypes": {
      "person": {
        "name": "person",
        "fields": {
          "name": {
            "name": "name",
            "type": {
              "compositeType": "person_name"
            }
          },
          "address": {
            "name": "address",
            "type": {
              "compositeType": "person_address"
            }
          }
        }
      },
      "person_name": {
        "name": "person_name",
        "fields": {
          "first_name": {
            "name": "first_name",
            "type": {
              "scalarType": "text"
            }
          },
          "last_name": {
            "name": "last_name",
            "type": {
              "scalarType": "text"
            }
          }
        }
      },
      "person_address": {
        "name": "person_address",
        "fields": {
          "address_line_1": {
            "name": "address_line_1",
            "type": {
              "scalarType": "text"
            }
          },
          "address_line_2": {
            "name": "address_line_2",
            "type": {
              "scalarType": "text"
            }
          }
        }
      }
    }
  }
}
