---
source: crates/query-engine/translation/tests/tests.rs
expression: result
---
WITH "%1_NATIVE_QUERY_make_person" AS (
  WITH "%15_NATIVE_QUERY_make_person" AS (
    SELECT
      ROW(
        jsonb_populate_record(cast(null as "public"."person_name"), $1),
        jsonb_populate_record(cast(null as "public"."person_address"), $2)
      ) :: person as result
  )
  SELECT
    *
  FROM
    "%15_NATIVE_QUERY_make_person" AS "%16_NATIVE_QUERY_make_person"
)
SELECT
  coalesce(json_agg(row_to_json("%11_universe")), '[]') AS "universe"
FROM
  (
    SELECT
      *
    FROM
      (
        SELECT
          coalesce(json_agg(row_to_json("%12_rows")), '[]') AS "rows"
        FROM
          (
            SELECT
              "%10_nested_fields_collect"."collected" AS "result"
            FROM
              "%1_NATIVE_QUERY_make_person" AS "%0_make_person"
              LEFT OUTER JOIN LATERAL (
                SELECT
                  row_to_json("%2_nested_fields") AS "collected"
                FROM
                  (
                    SELECT
                      "%6_nested_fields_collect"."collected" AS "address",
                      "%9_nested_fields_collect"."collected" AS "name"
                    FROM
                      (
                        SELECT
                          ("%0_make_person"."result").*
                      ) AS "%3_make_person.result"
                      LEFT OUTER JOIN LATERAL (
                        SELECT
                          row_to_json("%4_nested_fields") AS "collected"
                        FROM
                          (
                            SELECT
                              "%5_make_person.result.address"."address_line_1" AS "address_line_1",
                              "%5_make_person.result.address"."address_line_2" AS "address_line_2"
                            FROM
                              (
                                SELECT
                                  ("%3_make_person.result"."address").*
                              ) AS "%5_make_person.result.address"
                          ) AS "%4_nested_fields"
                      ) AS "%6_nested_fields_collect" ON ('true')
                      LEFT OUTER JOIN LATERAL (
                        SELECT
                          row_to_json("%7_nested_fields") AS "collected"
                        FROM
                          (
                            SELECT
                              "%8_make_person.result.name"."first_name" AS "first_name",
                              "%8_make_person.result.name"."last_name" AS "last_name"
                            FROM
                              (
                                SELECT
                                  ("%3_make_person.result"."name").*
                              ) AS "%8_make_person.result.name"
                          ) AS "%7_nested_fields"
                      ) AS "%9_nested_fields_collect" ON ('true')
                  ) AS "%2_nested_fields"
              ) AS "%10_nested_fields_collect" ON ('true')
          ) AS "%12_rows"
      ) AS "%12_rows"
  ) AS "%11_universe";

{
    1: Value(
        Object {
            "first_name": String("John"),
            "last_name": String("Doe"),
        },
    ),
    2: Value(
        Object {
            "address_line_1": String("Somstreet 159"),
            "address_line_2": String("Second door to the right"),
        },
    ),
}
