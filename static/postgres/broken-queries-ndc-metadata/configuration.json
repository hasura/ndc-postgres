{
  "version": "3",
  "$schema": "../../schema.json",
  "connectionSettings": {
    "connectionUri": {
      "variable": "CONNECTION_URI"
    },
    "poolSettings": {
      "maxConnections": 50,
      "poolTimeout": 30,
      "idleTimeout": 180,
      "connectionLifetime": 600
    },
    "isolationLevel": "ReadCommitted"
  },
  "metadata": {
    "tables": {},
    "compositeTypes": {},
    "nativeQueries": {
      "broken": {
        "sql": "SELECT ) AS result",
        "columns": {
          "result": {
            "name": "result",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "arguments": {},
        "description": "A native query that is so broken that it will abort an entire transaction"
      },
      "working": {
        "sql": "SELECT 1 AS result",
        "columns": {
          "result": {
            "name": "result",
            "type": {
              "scalarType": "int4"
            },
            "nullable": "nonNullable",
            "description": null
          }
        },
        "arguments": {},
        "description": "A working native query that simply returns 1"
      }
    },
    "aggregateFunctions": {
      "int4": {
        "avg": {
          "returnType": "numeric"
        },
        "bit_and": {
          "returnType": "int4"
        },
        "bit_or": {
          "returnType": "int4"
        },
        "bit_xor": {
          "returnType": "int4"
        },
        "max": {
          "returnType": "int4"
        },
        "min": {
          "returnType": "int4"
        },
        "stddev": {
          "returnType": "numeric"
        },
        "stddev_pop": {
          "returnType": "numeric"
        },
        "stddev_samp": {
          "returnType": "numeric"
        },
        "sum": {
          "returnType": "int8"
        },
        "var_pop": {
          "returnType": "numeric"
        },
        "var_samp": {
          "returnType": "numeric"
        },
        "variance": {
          "returnType": "numeric"
        }
      },
      "int8": {
        "avg": {
          "returnType": "numeric"
        },
        "bit_and": {
          "returnType": "int8"
        },
        "bit_or": {
          "returnType": "int8"
        },
        "bit_xor": {
          "returnType": "int8"
        },
        "max": {
          "returnType": "int8"
        },
        "min": {
          "returnType": "int8"
        },
        "stddev": {
          "returnType": "numeric"
        },
        "stddev_pop": {
          "returnType": "numeric"
        },
        "stddev_samp": {
          "returnType": "numeric"
        },
        "sum": {
          "returnType": "numeric"
        },
        "var_pop": {
          "returnType": "numeric"
        },
        "var_samp": {
          "returnType": "numeric"
        },
        "variance": {
          "returnType": "numeric"
        }
      },
      "numeric": {
        "avg": {
          "returnType": "numeric"
        },
        "max": {
          "returnType": "numeric"
        },
        "min": {
          "returnType": "numeric"
        },
        "stddev": {
          "returnType": "numeric"
        },
        "stddev_pop": {
          "returnType": "numeric"
        },
        "stddev_samp": {
          "returnType": "numeric"
        },
        "sum": {
          "returnType": "numeric"
        },
        "var_pop": {
          "returnType": "numeric"
        },
        "var_samp": {
          "returnType": "numeric"
        },
        "variance": {
          "returnType": "numeric"
        }
      }
    },
    "comparisonOperators": {
      "int4": {
        "_eq": {
          "operatorName": "=",
          "operatorKind": "equal",
          "argumentType": "int4",
          "isInfix": true
        },
        "_gt": {
          "operatorName": ">",
          "operatorKind": "custom",
          "argumentType": "int4",
          "isInfix": true
        },
        "_gte": {
          "operatorName": ">=",
          "operatorKind": "custom",
          "argumentType": "int4",
          "isInfix": true
        },
        "_in": {
          "operatorName": "IN",
          "operatorKind": "in",
          "argumentType": "int4",
          "isInfix": true
        },
        "_lt": {
          "operatorName": "<",
          "operatorKind": "custom",
          "argumentType": "int4",
          "isInfix": true
        },
        "_lte": {
          "operatorName": "<=",
          "operatorKind": "custom",
          "argumentType": "int4",
          "isInfix": true
        },
        "_neq": {
          "operatorName": "<>",
          "operatorKind": "custom",
          "argumentType": "int4",
          "isInfix": true
        }
      },
      "int8": {
        "_eq": {
          "operatorName": "=",
          "operatorKind": "equal",
          "argumentType": "int8",
          "isInfix": true
        },
        "_gt": {
          "operatorName": ">",
          "operatorKind": "custom",
          "argumentType": "int8",
          "isInfix": true
        },
        "_gte": {
          "operatorName": ">=",
          "operatorKind": "custom",
          "argumentType": "int8",
          "isInfix": true
        },
        "_in": {
          "operatorName": "IN",
          "operatorKind": "in",
          "argumentType": "int8",
          "isInfix": true
        },
        "_lt": {
          "operatorName": "<",
          "operatorKind": "custom",
          "argumentType": "int8",
          "isInfix": true
        },
        "_lte": {
          "operatorName": "<=",
          "operatorKind": "custom",
          "argumentType": "int8",
          "isInfix": true
        },
        "_neq": {
          "operatorName": "<>",
          "operatorKind": "custom",
          "argumentType": "int8",
          "isInfix": true
        }
      },
      "numeric": {
        "_eq": {
          "operatorName": "=",
          "operatorKind": "equal",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_gt": {
          "operatorName": ">",
          "operatorKind": "custom",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_gte": {
          "operatorName": ">=",
          "operatorKind": "custom",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_in": {
          "operatorName": "IN",
          "operatorKind": "in",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_lt": {
          "operatorName": "<",
          "operatorKind": "custom",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_lte": {
          "operatorName": "<=",
          "operatorKind": "custom",
          "argumentType": "numeric",
          "isInfix": true
        },
        "_neq": {
          "operatorName": "<>",
          "operatorKind": "custom",
          "argumentType": "numeric",
          "isInfix": true
        }
      }
    }
  },
  "introspectionOptions": {
    "excludedSchemas": [
      "information_schema",
      "pg_catalog",
      "tiger",
      "crdb_internal",
      "columnar",
      "columnar_internal"
    ],
    "unqualifiedSchemasForTables": ["public"],
    "unqualifiedSchemasForTypesAndProcedures": [
      "public",
      "pg_catalog",
      "tiger"
    ],
    "comparisonOperatorMapping": [
      {
        "operatorName": "=",
        "exposedName": "_eq",
        "operatorKind": "equal"
      },
      {
        "operatorName": "<=",
        "exposedName": "_lte",
        "operatorKind": "custom"
      },
      {
        "operatorName": ">",
        "exposedName": "_gt",
        "operatorKind": "custom"
      },
      {
        "operatorName": ">=",
        "exposedName": "_gte",
        "operatorKind": "custom"
      },
      {
        "operatorName": "<",
        "exposedName": "_lt",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!=",
        "exposedName": "_neq",
        "operatorKind": "custom"
      },
      {
        "operatorName": "LIKE",
        "exposedName": "_like",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT LIKE",
        "exposedName": "_nlike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "ILIKE",
        "exposedName": "_ilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT ILIKE",
        "exposedName": "_nilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "SIMILAR TO",
        "exposedName": "_similar",
        "operatorKind": "custom"
      },
      {
        "operatorName": "NOT SIMILAR TO",
        "exposedName": "_nsimilar",
        "operatorKind": "custom"
      },
      {
        "operatorName": "<>",
        "exposedName": "_neq",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~~",
        "exposedName": "_like",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~~",
        "exposedName": "_nlike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~~*",
        "exposedName": "_ilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~~*",
        "exposedName": "_nilike",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~",
        "exposedName": "_regex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~",
        "exposedName": "_nregex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "~*",
        "exposedName": "_iregex",
        "operatorKind": "custom"
      },
      {
        "operatorName": "!~*",
        "exposedName": "_niregex",
        "operatorKind": "custom"
      }
    ],
    "introspectPrefixFunctionComparisonOperators": [
      "box_above",
      "box_below",
      "box_contain",
      "box_contain_pt",
      "box_contained",
      "box_left",
      "box_overabove",
      "box_overbelow",
      "box_overlap",
      "box_overleft",
      "box_overright",
      "box_right",
      "box_same",
      "circle_above",
      "circle_below",
      "circle_contain",
      "circle_contain_pt",
      "circle_contained",
      "circle_left",
      "circle_overabove",
      "circle_overbelow",
      "circle_overlap",
      "circle_overleft",
      "circle_overright",
      "circle_right",
      "circle_same",
      "contains_2d",
      "equals",
      "geography_overlaps",
      "geometry_above",
      "geometry_below",
      "geometry_contained_3d",
      "geometry_contains",
      "geometry_contains_3d",
      "geometry_contains_nd",
      "geometry_left",
      "geometry_overabove",
      "geometry_overbelow",
      "geometry_overlaps",
      "geometry_overlaps_3d",
      "geometry_overlaps_nd",
      "geometry_overleft",
      "geometry_overright",
      "geometry_right",
      "geometry_same",
      "geometry_same_3d",
      "geometry_same_nd",
      "geometry_within",
      "geometry_within_nd",
      "inet_same_family",
      "inter_lb",
      "inter_sb",
      "inter_sl",
      "is_contained_2d",
      "ishorizontal",
      "isparallel",
      "isperp",
      "isvertical",
      "jsonb_contained",
      "jsonb_contains",
      "jsonb_exists",
      "jsonb_path_exists_opr",
      "jsonb_path_match_opr",
      "line_intersect",
      "line_parallel",
      "line_perp",
      "lseg_intersect",
      "lseg_parallel",
      "lseg_perp",
      "network_overlap",
      "network_sub",
      "network_sup",
      "on_pb",
      "on_pl",
      "on_ppath",
      "on_ps",
      "on_sb",
      "on_sl",
      "overlaps_2d",
      "path_contain_pt",
      "path_inter",
      "point_above",
      "point_below",
      "point_horiz",
      "point_left",
      "point_right",
      "point_vert",
      "poly_above",
      "poly_below",
      "poly_contain",
      "poly_contain_pt",
      "poly_contained",
      "poly_left",
      "poly_overabove",
      "poly_overbelow",
      "poly_overlap",
      "poly_overleft",
      "poly_overright",
      "poly_right",
      "poly_same",
      "pt_contained_poly",
      "st_3dintersects",
      "st_contains",
      "st_containsproperly",
      "st_coveredby",
      "st_covers",
      "st_crosses",
      "st_disjoint",
      "st_equals",
      "st_intersects",
      "st_isvalid",
      "st_orderingequals",
      "st_overlaps",
      "st_relatematch",
      "st_touches",
      "st_within",
      "starts_with",
      "ts_match_qv",
      "ts_match_tq",
      "ts_match_tt",
      "ts_match_vq",
      "tsq_mcontained",
      "tsq_mcontains",
      "xmlexists",
      "xmlvalidate",
      "xpath_exists"
    ]
  },
  "mutationsVersion": "v1"
}
