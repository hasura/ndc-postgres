name: deploy

on:
  workflow_run:
    workflows:
      - nix build
    types:
      - completed

jobs:
  deploy:
    name: push
    runs-on: ubuntu-latest
    # only run if the previous workflow succeeded,
    # and only on the `main` branch or version tags
    # note we currently tag the image with 'latest', so will want to
    # stop doing so if we run this on PR branches etc
    if: |
      github.event.workflow_run.conclusion == 'success'
        && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Install Nix ❄
        uses: cachix/install-nix-action@v23
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up the Nix Cache 🔌
        uses: cachix/cachix-action@v12
        with:
          name: hasura-v3-dev
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - id: gcloud-auth
        name: Authenticate to Google Cloud 🔑
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          service_account: "hasura-ci-docker-writer@hasura-ddn.iam.gserviceaccount.com"
          workload_identity_provider: "projects/1025009031284/locations/global/workloadIdentityPools/hasura-ddn/providers/github"

      - name: Login to Google Container Registry 📦
        uses: "docker/login-action@v3"
        with:
          registry: "us-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.gcloud-auth.outputs.access_token }}"

      - name: Login to GitHub Container Registry 📦
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images to Google Container Registry 🚢
        run: nix run .#publish-docker-image '${{ github.ref }}' 'us-docker.pkg.dev/hasura-ddn/ddn/ndc-postgres'

      - name: Push Docker images to GitHub Packages 🚢
        run: nix run .#publish-docker-image '${{ github.ref }}' 'ghcr.io/hasura/ndc-postgres'

      - name: Deploy to Staging 🚀
        env:
          BUILDKITE_AUTH_TOKEN: ${{ secrets.BUILDKITE_AUTH_TOKEN }}
        run: |
          long_sha=$(git rev-parse HEAD)
          short_sha=$(git rev-parse --short=9 HEAD)
          req_data=$(cat <<EOF
          {
            "commit": "${long_sha}",
            "branch": "main",
            "message": "deploy ndc-postgres config server ${GITHUB_SHA} to staging :rocket:",
            "author": {
              "name": "Hasura Bot",
              "email": "accounts+ci@hasura.io"
            },
            "env": {
              "RELEASE_VERSION": "dev-main-${short_sha}"
            }
          }
          EOF)

          curl -X POST "https://api.buildkite.com/v2/organizations/hasura/pipelines/release-ndc-postgres-config-server/builds" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${BUILDKITE_AUTH_TOKEN}" \
            -d "$req_data"

      # scream into Slack if something goes wrong
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: failure
          notification_title: "😧 Error on <{repo_url}|{repo}>"
          message_format: "🐴 *{workflow}* {status_message} for <{repo_url}|{repo}>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BROKEN_BUILD_SLACK_WEBHOOK_URL }}
