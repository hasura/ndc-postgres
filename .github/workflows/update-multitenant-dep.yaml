name: update ndc-multitenant dependency

on:
  push:
    branches:
      - main

jobs:
  send-pull-requests:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.HASURA_BOT_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ndc-postgres

      - name: Checkout multitenant repo
        uses: actions/checkout@v4
        with:
          repository: hasura/ndc-multitenant
          path: ndc-multitenant
          token: ${{ secrets.HASURA_BOT_TOKEN }}

      - name: Setup cargo environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.72.0

      - name: Send pull-request
        run: |
          # get newest commit to use
          LATEST_SHA=$(cd ndc-postgres && git rev-parse --short HEAD)

          BRANCH_NAME="update-ndc-postgres-to-$LATEST_SHA"
          DEP_FILEPATH="Cargo.toml"

          # Change working directory to the repo folder
          cd ndc-multitenant

          git config --global user.name "hasura-bot"
          git config --global user.email "accounts@hasura.io"

          # Create a new feature branch for the changes.
          git checkout -b $BRANCH_NAME

          # Update the hash to the latest version.
          sed -i -e '/ndc-postgres.git/s/rev[ ]*=[ ]*"[[:alnum:]]*"/rev = "'"$LATEST_SHA"'"/g' $DEP_FILEPATH

          # ssh git access required for cargo update
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.SSH_GIT_ACCESS_PRIVATE }}'

          # Update Cargo lock file, but as little as possible
          cargo update -p ndc-postgres

          # Commit the changes and push the feature branch to origin
          git add .
          git commit -m "dep update: update ndc-postgres to $LATEST_SHA"
          git push origin $BRANCH_NAME

          # create a pull-requests containing the updates.
          gh pr create \
            --body "Commit in ndc-postgres: https://github.com/hasura/ndc-postgres/commit/$LATEST_SHA" \
            --title "dep update: update ndc-postgres to $LATEST_SHA" \
            --head "$BRANCH_NAME" \
            --base "main" \
            --reviewer "hasura/native-databases"

      # scream into Slack if something goes wrong
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: failure
          notification_title: "üòß Error on <{repo_url}|{repo}>"
          message_format: "üê¥ *{workflow}* {status_message} for <{repo_url}|{repo}>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BROKEN_BUILD_SLACK_WEBHOOK_URL }}
